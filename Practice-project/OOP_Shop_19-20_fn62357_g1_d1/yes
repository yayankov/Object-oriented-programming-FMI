#include "FitnessEquipment.h"
#include <cstring>



FitnessEquipment::FitnessEquipment()
{
	setCategory("");
	setColor("");
	setSize(0);
}

FitnessEquipment::FitnessEquipment(const char * _category, const char * _color, double _size)
{
	setCategory(_category);
	setColor(_color);
	setSize(_size);
}

FitnessEquipment::FitnessEquipment(const FitnessEquipment & cpy)
{
	setCategory(cpy.category);
	setColor(cpy.color);
	setSize(cpy.size);
}

FitnessEquipment & FitnessEquipment::operator=(const FitnessEquipment & cpy)
{
	if (this != & cpy)
	{
		setCategory(cpy.category);
		setColor(cpy.color);
		setSize(cpy.size);
	}
	return *this;
}

FitnessEquipment::~FitnessEquipment()
{
	delete[] category;
	delete[] color;
}

void FitnessEquipment::setCategory(const char * _category)
{
	if (_category == nullptr) return;
	int Length = strlen(_category);
	char* temp = new char[Length + 1];
	strcpy(temp, _category);
	delete[] category;
	category = temp;
}

void FitnessEquipment::setColor(const char * _color)
{
	if (_color == nullptr) return;
	int Length = strlen(_color);
	char* temp = new char[Length + 1];
	strcpy(temp, _color);
	delete[] color;
	color = temp;
}

void FitnessEquipment::setSize(double _size)
{
	this->size = _size;
}

const char * FitnessEquipment::getCategory() const
{
	return category;
}

const char * FitnessEquipment::getColor() const
{
	return color;
}

double FitnessEquipment::getSize() const
{
	return size;
}

#pragma once
class FitnessEquipment
{
	char* category = nullptr;
	char* color = nullptr;
	double size;

public:
	FitnessEquipment();
	FitnessEquipment(const char*, const char*, double);
	FitnessEquipment(const FitnessEquipment&);
	FitnessEquipment& operator=(const FitnessEquipment&);
	~FitnessEquipment();

	//setters
	void setCategory(const char*);
	void setColor(const char*);
	void setSize(double);

	//getters
	const char* getCategory() const;
	const char* getColor() const;
	double getSize() const;
};
#include "FitnessZone.h"



FitnessZone::FitnessZone()
{
	this->capacity = 0;
}

FitnessZone::FitnessZone(const FitnessZone & cpy)
{
	setCapacity(cpy.capacity);
}

FitnessZone & FitnessZone::operator=(const FitnessZone & cpy)
{
	if (this != & cpy)
	{
		setCapacity(cpy.capacity);
	}
	return *this;
}


FitnessZone::~FitnessZone()
{
}

void FitnessZone::setCapacity(int _capacity)
{
	this->capacity = _capacity;
}

int FitnessZone::getCapacity() const
{
	return this->capacity;
}

#pragma once
class FitnessZone
{
	int capacity;

public:
	FitnessZone();
	FitnessZone(const FitnessZone&);
	FitnessZone& operator=(const FitnessZone&);
	~FitnessZone();

	//seters
	void setCapacity(int);

	//getters
	int getCapacity() const;
};
#include "NutritionalSupplement.h"
#include <cstring>



NutritionalSupplement::NutritionalSupplement()
{
	setType("");
	setIngredients("");
	setWeight(0);
}

NutritionalSupplement::NutritionalSupplement(const char * _type, const char * _ingredients, double _weight)
{
	setType(_type);
	setIngredients(_ingredients);
	setWeight(_weight);
}

NutritionalSupplement::NutritionalSupplement(const NutritionalSupplement& cpy)
{
	setType(cpy.type);
	setIngredients(cpy.ingredients);
	setWeight(cpy.weight);
}

NutritionalSupplement & NutritionalSupplement::operator=(const NutritionalSupplement & cpy)
{
	if (this != &cpy)
	{
		setType(cpy.type);
		setIngredients(cpy.ingredients);
		setWeight(cpy.weight);
	}
	return *this;
}

NutritionalSupplement::~NutritionalSupplement()
{
	delete[] type;
	delete[] ingredients;
}

void NutritionalSupplement::setType(const char * _type)
{
	if (_type == nullptr) return;
	int Length = strlen(_type);
	char* temp = new char[Length + 1];
	strcpy(temp, _type);
	delete[] type;
	type = temp;
}

void NutritionalSupplement::setIngredients(const char * _ingredients)
{
	if (_ingredients == nullptr) return;
	int Length = strlen(_ingredients);
	char* temp = new char[Length + 1];
	strcpy(temp, _ingredients);
	delete[] ingredients;
	ingredients = temp;
}

void NutritionalSupplement::setWeight(double _weight)
{
	this->weight = _weight;
}

const char * NutritionalSupplement::getType() const
{
	return this->type;
}

const char * NutritionalSupplement::getIngredients() const
{
	return this->ingredients;
}

double NutritionalSupplement::getWeight() const
{
	return this->weight;
}

#pragma once
class NutritionalSupplement
{
	char* type = nullptr;
	char* ingredients = nullptr;
	double weight;

public:
	NutritionalSupplement();
	NutritionalSupplement(const char*, const char*, double);
	NutritionalSupplement(const NutritionalSupplement&);
	NutritionalSupplement& operator=(const NutritionalSupplement&);
	~NutritionalSupplement();

	//setters
	void setType(const char*);
	void setIngredients(const char*);
	void setWeight(double);

	//getters
	const char* getType() const;
	const char* getIngredients() const;
	double getWeight() const;

};
#include "Product.h"
#include <cstring>



Product::Product()
{
	setName("");
	setBrand("");
	setId("");
	setPrice(0);
}

Product::Product(const char * _name, const char * _brand, const char * _id, double _price)
{
	setName(_name);
	setBrand(_brand);
	setId(_id);
	setPrice(_price);
}

Product::Product(const Product& cpy)
{
	setName(cpy.name);
	setBrand(cpy.brand);
	setId(cpy.id);
	setPrice(cpy.price);
}

Product & Product::operator=(const Product & cpy)
{
	if (this != &cpy)
	{
		setName(cpy.name);
		setBrand(cpy.brand);
		setId(cpy.id);
		setPrice(cpy.price);
	}
	return *this;

}

Product::~Product()
{
	delete[] name;
	delete[] brand;
	delete[] id;
}

void Product::setName(const char * _name)
{
	if (_name == nullptr) return;
	int Length = strlen(_name);
	char* temp = new char[Length + 1];
	strcpy(temp, _name);
	delete[] name;
	name = temp;
}

void Product::setBrand(const char * _brand)
{
	if (_brand == nullptr) return;
	int Length = strlen(_brand);
	char* temp = new char[Length + 1];
	strcpy(temp, _brand);
	delete[] brand;
	brand = temp;

}

void Product::setId(const char * _id)
{
	if (_id == nullptr) return;
	int Length = strlen(_id);
	char* temp = new char[Length + 1];
	strcpy(temp, _id);
	delete[] id;
	id = temp;

}

void Product::setPrice(double _price)
{
	price = _price;
}

const char * Product::getName() const
{
	return this->name;
}

const char * Product::getBrand() const
{
	return this->brand;
}

const char * Product::getId() const
{
	return this->id;
}

double Product::getPrice() const
{
	return this->price;
}

#pragma once
class Product
{
	char* name = nullptr;
	char* brand = nullptr;
	char* id = nullptr;
	double price;

public:
	Product();
	Product(const char*, const char*, const char*, double);
	Product(const Product&);
	Product& operator=(const Product&);
	~Product();

	//setters
	void setName(const char*);
	void setBrand(const char*);
	void setId(const char*);
	void setPrice(double);

	//getters
	const char* getName() const;
	const char* getBrand() const;
	const char* getId() const;
	double getPrice() const;
};
